!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){var r;!function(o){"use strict";var a,s=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,i=Math.ceil,c=Math.floor,u="[BigNumber Error] ",l=u+"Number primitive has more than 15 significant digits: ",p=1e14,d=14,f=9007199254740991,m=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,h=1e9;function w(e){var t=0|e;return e>0||e===t?t:t-1}function b(e){for(var t,n,r=1,o=e.length,a=e[0]+"";r<o;){for(t=e[r++]+"",n=d-t.length;n--;t="0"+t);a+=t}for(o=a.length;48===a.charCodeAt(--o););return a.slice(0,o+1||1)}function g(e,t){var n,r,o=e.c,a=t.c,s=e.s,i=t.s,c=e.e,u=t.e;if(!s||!i)return null;if(n=o&&!o[0],r=a&&!a[0],n||r)return n?r?0:-i:s;if(s!=i)return s;if(n=s<0,r=c==u,!o||!a)return r?0:!o^n?1:-1;if(!r)return c>u^n?1:-1;for(i=(c=o.length)<(u=a.length)?c:u,s=0;s<i;s++)if(o[s]!=a[s])return o[s]>a[s]^n?1:-1;return c==u?0:c>u^n?1:-1}function v(e,t,n,r){if(e<t||e>n||e!==(e<0?i(e):c(e)))throw Error(u+(r||"Argument")+("number"==typeof e?e<t||e>n?" out of range: ":" not an integer: ":" not a primitive number: ")+e)}function _(e){return"[object Array]"==Object.prototype.toString.call(e)}function x(e){var t=e.c.length-1;return w(e.e/d)==t&&e.c[t]%2!=0}function T(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function A(e,t,n){var r,o;if(t<0){for(o=n+".";++t;o+=n);e=o+e}else if(++t>(r=e.length)){for(o=n,t-=r;--t;o+=n);e+=o}else t<r&&(e=e.slice(0,t)+"."+e.slice(t));return e}(a=function e(t){var n,r,o,a,O,k,E,N,M,S=G.prototype={constructor:G,toString:null,valueOf:null},C=new G(1),R=20,I=4,P=-7,B=21,H=-1e7,L=1e7,U=!1,D=1,$=0,W={decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:"Â ",fractionGroupSize:0},F="0123456789abcdefghijklmnopqrstuvwxyz";function G(e,t){var n,a,i,u,p,m,y,h,w=this;if(!(w instanceof G))return new G(e,t);if(null==t){if(e instanceof G)return w.s=e.s,w.e=e.e,void(w.c=(e=e.c)?e.slice():e);if((m="number"==typeof e)&&0*e==0){if(w.s=1/e<0?(e=-e,-1):1,e===~~e){for(u=0,p=e;p>=10;p/=10,u++);return w.e=u,void(w.c=[e])}h=e+""}else{if(!s.test(h=e+""))return o(w,h,m);w.s=45==h.charCodeAt(0)?(h=h.slice(1),-1):1}(u=h.indexOf("."))>-1&&(h=h.replace(".","")),(p=h.search(/e/i))>0?(u<0&&(u=p),u+=+h.slice(p+1),h=h.substring(0,p)):u<0&&(u=h.length)}else{if(v(t,2,F.length,"Base"),h=e+"",10==t)return z(w=new G(e instanceof G?e:h),R+w.e+1,I);if(m="number"==typeof e){if(0*e!=0)return o(w,h,m,t);if(w.s=1/e<0?(h=h.slice(1),-1):1,G.DEBUG&&h.replace(/^0\.0*|\./,"").length>15)throw Error(l+e);m=!1}else w.s=45===h.charCodeAt(0)?(h=h.slice(1),-1):1;for(n=F.slice(0,t),u=p=0,y=h.length;p<y;p++)if(n.indexOf(a=h.charAt(p))<0){if("."==a){if(p>u){u=y;continue}}else if(!i&&(h==h.toUpperCase()&&(h=h.toLowerCase())||h==h.toLowerCase()&&(h=h.toUpperCase()))){i=!0,p=-1,u=0;continue}return o(w,e+"",m,t)}(u=(h=r(h,t,10,w.s)).indexOf("."))>-1?h=h.replace(".",""):u=h.length}for(p=0;48===h.charCodeAt(p);p++);for(y=h.length;48===h.charCodeAt(--y););if(h=h.slice(p,++y)){if(y-=p,m&&G.DEBUG&&y>15&&(e>f||e!==c(e)))throw Error(l+w.s*e);if((u=u-p-1)>L)w.c=w.e=null;else if(u<H)w.c=[w.e=0];else{if(w.e=u,w.c=[],p=(u+1)%d,u<0&&(p+=d),p<y){for(p&&w.c.push(+h.slice(0,p)),y-=d;p<y;)w.c.push(+h.slice(p,p+=d));h=h.slice(p),p=d-h.length}else p-=y;for(;p--;h+="0");w.c.push(+h)}}else w.c=[w.e=0]}function V(e,t,n,r){var o,a,s,i,c;if(null==n?n=I:v(n,0,8),!e.c)return e.toString();if(o=e.c[0],s=e.e,null==t)c=b(e.c),c=1==r||2==r&&s<=P?T(c,s):A(c,s,"0");else if(a=(e=z(new G(e),t,n)).e,i=(c=b(e.c)).length,1==r||2==r&&(t<=a||a<=P)){for(;i<t;c+="0",i++);c=T(c,a)}else if(t-=s,c=A(c,a,"0"),a+1>i){if(--t>0)for(c+=".";t--;c+="0");}else if((t+=a-i)>0)for(a+1==i&&(c+=".");t--;c+="0");return e.s<0&&o?"-"+c:c}function j(e,t){var n,r,o=0;for(_(e[0])&&(e=e[0]),n=new G(e[0]);++o<e.length;){if(!(r=new G(e[o])).s){n=r;break}t.call(n,r)&&(n=r)}return n}function X(e,t,n){for(var r=1,o=t.length;!t[--o];t.pop());for(o=t[0];o>=10;o/=10,r++);return(n=r+n*d-1)>L?e.c=e.e=null:n<H?e.c=[e.e=0]:(e.e=n,e.c=t),e}function z(e,t,n,r){var o,a,s,u,l,f,y,h=e.c,w=m;if(h){e:{for(o=1,u=h[0];u>=10;u/=10,o++);if((a=t-o)<0)a+=d,s=t,y=(l=h[f=0])/w[o-s-1]%10|0;else if((f=i((a+1)/d))>=h.length){if(!r)break e;for(;h.length<=f;h.push(0));l=y=0,o=1,s=(a%=d)-d+1}else{for(l=u=h[f],o=1;u>=10;u/=10,o++);y=(s=(a%=d)-d+o)<0?0:l/w[o-s-1]%10|0}if(r=r||t<0||null!=h[f+1]||(s<0?l:l%w[o-s-1]),r=n<4?(y||r)&&(0==n||n==(e.s<0?3:2)):y>5||5==y&&(4==n||r||6==n&&(a>0?s>0?l/w[o-s]:0:h[f-1])%10&1||n==(e.s<0?8:7)),t<1||!h[0])return h.length=0,r?(t-=e.e+1,h[0]=w[(d-t%d)%d],e.e=-t||0):h[0]=e.e=0,e;if(0==a?(h.length=f,u=1,f--):(h.length=f+1,u=w[d-a],h[f]=s>0?c(l/w[o-s]%w[s])*u:0),r)for(;;){if(0==f){for(a=1,s=h[0];s>=10;s/=10,a++);for(s=h[0]+=u,u=1;s>=10;s/=10,u++);a!=u&&(e.e++,h[0]==p&&(h[0]=1));break}if(h[f]+=u,h[f]!=p)break;h[f--]=0,u=1}for(a=h.length;0===h[--a];h.pop());}e.e>L?e.c=e.e=null:e.e<H&&(e.c=[e.e=0])}return e}return G.clone=e,G.ROUND_UP=0,G.ROUND_DOWN=1,G.ROUND_CEIL=2,G.ROUND_FLOOR=3,G.ROUND_HALF_UP=4,G.ROUND_HALF_DOWN=5,G.ROUND_HALF_EVEN=6,G.ROUND_HALF_CEIL=7,G.ROUND_HALF_FLOOR=8,G.EUCLID=9,G.config=G.set=function(e){var t,n;if(null!=e){if("object"!=typeof e)throw Error(u+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(v(n=e[t],0,h,t),R=n),e.hasOwnProperty(t="ROUNDING_MODE")&&(v(n=e[t],0,8,t),I=n),e.hasOwnProperty(t="EXPONENTIAL_AT")&&(_(n=e[t])?(v(n[0],-h,0,t),v(n[1],0,h,t),P=n[0],B=n[1]):(v(n,-h,h,t),P=-(B=n<0?-n:n))),e.hasOwnProperty(t="RANGE"))if(_(n=e[t]))v(n[0],-h,-1,t),v(n[1],1,h,t),H=n[0],L=n[1];else{if(v(n,-h,h,t),!n)throw Error(u+t+" cannot be zero: "+n);H=-(L=n<0?-n:n)}if(e.hasOwnProperty(t="CRYPTO")){if((n=e[t])!==!!n)throw Error(u+t+" not true or false: "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw U=!n,Error(u+"crypto unavailable");U=n}else U=n}if(e.hasOwnProperty(t="MODULO_MODE")&&(v(n=e[t],0,9,t),D=n),e.hasOwnProperty(t="POW_PRECISION")&&(v(n=e[t],0,h,t),$=n),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(n=e[t]))throw Error(u+t+" not an object: "+n);W=n}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(n=e[t])||/^.$|\.|(.).*\1/.test(n))throw Error(u+t+" invalid: "+n);F=n}}return{DECIMAL_PLACES:R,ROUNDING_MODE:I,EXPONENTIAL_AT:[P,B],RANGE:[H,L],CRYPTO:U,MODULO_MODE:D,POW_PRECISION:$,FORMAT:W,ALPHABET:F}},G.isBigNumber=function(e){return e instanceof G||e&&!0===e._isBigNumber||!1},G.maximum=G.max=function(){return j(arguments,S.lt)},G.minimum=G.min=function(){return j(arguments,S.gt)},G.random=(a=9007199254740992*Math.random()&2097151?function(){return c(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,n,r,o,s,l=0,p=[],f=new G(C);if(null==e?e=R:v(e,0,h),o=i(e/d),U)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(o*=2));l<o;)(s=131072*t[l]+(t[l+1]>>>11))>=9e15?(n=crypto.getRandomValues(new Uint32Array(2)),t[l]=n[0],t[l+1]=n[1]):(p.push(s%1e14),l+=2);l=o/2}else{if(!crypto.randomBytes)throw U=!1,Error(u+"crypto unavailable");for(t=crypto.randomBytes(o*=7);l<o;)(s=281474976710656*(31&t[l])+1099511627776*t[l+1]+4294967296*t[l+2]+16777216*t[l+3]+(t[l+4]<<16)+(t[l+5]<<8)+t[l+6])>=9e15?crypto.randomBytes(7).copy(t,l):(p.push(s%1e14),l+=7);l=o/7}if(!U)for(;l<o;)(s=a())<9e15&&(p[l++]=s%1e14);for(o=p[--l],e%=d,o&&e&&(s=m[d-e],p[l]=c(o/s)*s);0===p[l];p.pop(),l--);if(l<0)p=[r=0];else{for(r=-1;0===p[0];p.splice(0,1),r-=d);for(l=1,s=p[0];s>=10;s/=10,l++);l<d&&(r-=d-l)}return f.e=r,f.c=p,f}),r=function(){function e(e,t,n,r){for(var o,a,s=[0],i=0,c=e.length;i<c;){for(a=s.length;a--;s[a]*=t);for(s[0]+=r.indexOf(e.charAt(i++)),o=0;o<s.length;o++)s[o]>n-1&&(null==s[o+1]&&(s[o+1]=0),s[o+1]+=s[o]/n|0,s[o]%=n)}return s.reverse()}return function(t,r,o,a,s){var i,c,u,l,p,d,f,m,y=t.indexOf("."),h=R,w=I;for(y>=0&&(l=$,$=0,t=t.replace(".",""),d=(m=new G(r)).pow(t.length-y),$=l,m.c=e(A(b(d.c),d.e,"0"),10,o,"0123456789"),m.e=m.c.length),u=l=(f=e(t,r,o,s?(i=F,"0123456789"):(i="0123456789",F))).length;0==f[--l];f.pop());if(!f[0])return i.charAt(0);if(y<0?--u:(d.c=f,d.e=u,d.s=a,f=(d=n(d,m,h,w,o)).c,p=d.r,u=d.e),y=f[c=u+h+1],l=o/2,p=p||c<0||null!=f[c+1],p=w<4?(null!=y||p)&&(0==w||w==(d.s<0?3:2)):y>l||y==l&&(4==w||p||6==w&&1&f[c-1]||w==(d.s<0?8:7)),c<1||!f[0])t=p?A(i.charAt(1),-h,i.charAt(0)):i.charAt(0);else{if(f.length=c,p)for(--o;++f[--c]>o;)f[c]=0,c||(++u,f=[1].concat(f));for(l=f.length;!f[--l];);for(y=0,t="";y<=l;t+=i.charAt(f[y++]));t=A(t,u,i.charAt(0))}return t}}(),n=function(){function e(e,t,n){var r,o,a,s,i=0,c=e.length,u=t%y,l=t/y|0;for(e=e.slice();c--;)i=((o=u*(a=e[c]%y)+(r=l*a+(s=e[c]/y|0)*u)%y*y+i)/n|0)+(r/y|0)+l*s,e[c]=o%n;return i&&(e=[i].concat(e)),e}function t(e,t,n,r){var o,a;if(n!=r)a=n>r?1:-1;else for(o=a=0;o<n;o++)if(e[o]!=t[o]){a=e[o]>t[o]?1:-1;break}return a}function n(e,t,n,r){for(var o=0;n--;)e[n]-=o,o=e[n]<t[n]?1:0,e[n]=o*r+e[n]-t[n];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(r,o,a,s,i){var u,l,f,m,y,h,b,g,v,_,x,T,A,O,k,E,N,M=r.s==o.s?1:-1,S=r.c,C=o.c;if(!(S&&S[0]&&C&&C[0]))return new G(r.s&&o.s&&(S?!C||S[0]!=C[0]:C)?S&&0==S[0]||!C?0*M:M/0:NaN);for(v=(g=new G(M)).c=[],M=a+(l=r.e-o.e)+1,i||(i=p,l=w(r.e/d)-w(o.e/d),M=M/d|0),f=0;C[f]==(S[f]||0);f++);if(C[f]>(S[f]||0)&&l--,M<0)v.push(1),m=!0;else{for(O=S.length,E=C.length,f=0,M+=2,(y=c(i/(C[0]+1)))>1&&(C=e(C,y,i),S=e(S,y,i),E=C.length,O=S.length),A=E,x=(_=S.slice(0,E)).length;x<E;_[x++]=0);N=C.slice(),N=[0].concat(N),k=C[0],C[1]>=i/2&&k++;do{if(y=0,(u=t(C,_,E,x))<0){if(T=_[0],E!=x&&(T=T*i+(_[1]||0)),(y=c(T/k))>1)for(y>=i&&(y=i-1),b=(h=e(C,y,i)).length,x=_.length;1==t(h,_,b,x);)y--,n(h,E<b?N:C,b,i),b=h.length,u=1;else 0==y&&(u=y=1),b=(h=C.slice()).length;if(b<x&&(h=[0].concat(h)),n(_,h,x,i),x=_.length,-1==u)for(;t(C,_,E,x)<1;)y++,n(_,E<x?N:C,x,i),x=_.length}else 0===u&&(y++,_=[0]);v[f++]=y,_[0]?_[x++]=S[A]||0:(_=[S[A]],x=1)}while((A++<O||null!=_[0])&&M--);m=null!=_[0],v[0]||v.splice(0,1)}if(i==p){for(f=1,M=v[0];M>=10;M/=10,f++);z(g,a+(g.e=f+l*d-1)+1,s,m)}else g.e=l,g.r=+m;return g}}(),O=/^(-?)0([xbo])(?=\w[\w.]*$)/i,k=/^([^.]+)\.$/,E=/^\.([^.]+)$/,N=/^-?(Infinity|NaN)$/,M=/^\s*\+(?=[\w.])|^\s+|\s+$/g,o=function(e,t,n,r){var o,a=n?t:t.replace(M,"");if(N.test(a))e.s=isNaN(a)?null:a<0?-1:1,e.c=e.e=null;else{if(!n&&(a=a.replace(O,function(e,t,n){return o="x"==(n=n.toLowerCase())?16:"b"==n?2:8,r&&r!=o?e:t}),r&&(o=r,a=a.replace(k,"$1").replace(E,"0.$1")),t!=a))return new G(a,o);if(G.DEBUG)throw Error(u+"Not a"+(r?" base "+r:"")+" number: "+t);e.c=e.e=e.s=null}},S.absoluteValue=S.abs=function(){var e=new G(this);return e.s<0&&(e.s=1),e},S.comparedTo=function(e,t){return g(this,new G(e,t))},S.decimalPlaces=S.dp=function(e,t){var n,r,o,a=this;if(null!=e)return v(e,0,h),null==t?t=I:v(t,0,8),z(new G(a),e+a.e+1,t);if(!(n=a.c))return null;if(r=((o=n.length-1)-w(this.e/d))*d,o=n[o])for(;o%10==0;o/=10,r--);return r<0&&(r=0),r},S.dividedBy=S.div=function(e,t){return n(this,new G(e,t),R,I)},S.dividedToIntegerBy=S.idiv=function(e,t){return n(this,new G(e,t),0,1)},S.exponentiatedBy=S.pow=function(e,t){var n,r,o,a,s,l,p,f=this;if((e=new G(e)).c&&!e.isInteger())throw Error(u+"Exponent not an integer: "+e);if(null!=t&&(t=new G(t)),a=e.e>14,!f.c||!f.c[0]||1==f.c[0]&&!f.e&&1==f.c.length||!e.c||!e.c[0])return p=new G(Math.pow(+f.valueOf(),a?2-x(e):+e)),t?p.mod(t):p;if(s=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new G(NaN);(r=!s&&f.isInteger()&&t.isInteger())&&(f=f.mod(t))}else{if(e.e>9&&(f.e>0||f.e<-1||(0==f.e?f.c[0]>1||a&&f.c[1]>=24e7:f.c[0]<8e13||a&&f.c[0]<=9999975e7)))return o=f.s<0&&x(e)?-0:0,f.e>-1&&(o=1/o),new G(s?1/o:o);$&&(o=i($/d+2))}for(a?(n=new G(.5),l=x(e)):l=e%2,s&&(e.s=1),p=new G(C);;){if(l){if(!(p=p.times(f)).c)break;o?p.c.length>o&&(p.c.length=o):r&&(p=p.mod(t))}if(a){if(z(e=e.times(n),e.e+1,1),!e.c[0])break;a=e.e>14,l=x(e)}else{if(!(e=c(e/2)))break;l=e%2}f=f.times(f),o?f.c&&f.c.length>o&&(f.c.length=o):r&&(f=f.mod(t))}return r?p:(s&&(p=C.div(p)),t?p.mod(t):o?z(p,$,I,void 0):p)},S.integerValue=function(e){var t=new G(this);return null==e?e=I:v(e,0,8),z(t,t.e+1,e)},S.isEqualTo=S.eq=function(e,t){return 0===g(this,new G(e,t))},S.isFinite=function(){return!!this.c},S.isGreaterThan=S.gt=function(e,t){return g(this,new G(e,t))>0},S.isGreaterThanOrEqualTo=S.gte=function(e,t){return 1===(t=g(this,new G(e,t)))||0===t},S.isInteger=function(){return!!this.c&&w(this.e/d)>this.c.length-2},S.isLessThan=S.lt=function(e,t){return g(this,new G(e,t))<0},S.isLessThanOrEqualTo=S.lte=function(e,t){return-1===(t=g(this,new G(e,t)))||0===t},S.isNaN=function(){return!this.s},S.isNegative=function(){return this.s<0},S.isPositive=function(){return this.s>0},S.isZero=function(){return!!this.c&&0==this.c[0]},S.minus=function(e,t){var n,r,o,a,s=this,i=s.s;if(t=(e=new G(e,t)).s,!i||!t)return new G(NaN);if(i!=t)return e.s=-t,s.plus(e);var c=s.e/d,u=e.e/d,l=s.c,f=e.c;if(!c||!u){if(!l||!f)return l?(e.s=-t,e):new G(f?s:NaN);if(!l[0]||!f[0])return f[0]?(e.s=-t,e):new G(l[0]?s:3==I?-0:0)}if(c=w(c),u=w(u),l=l.slice(),i=c-u){for((a=i<0)?(i=-i,o=l):(u=c,o=f),o.reverse(),t=i;t--;o.push(0));o.reverse()}else for(r=(a=(i=l.length)<(t=f.length))?i:t,i=t=0;t<r;t++)if(l[t]!=f[t]){a=l[t]<f[t];break}if(a&&(o=l,l=f,f=o,e.s=-e.s),(t=(r=f.length)-(n=l.length))>0)for(;t--;l[n++]=0);for(t=p-1;r>i;){if(l[--r]<f[r]){for(n=r;n&&!l[--n];l[n]=t);--l[n],l[r]+=p}l[r]-=f[r]}for(;0==l[0];l.splice(0,1),--u);return l[0]?X(e,l,u):(e.s=3==I?-1:1,e.c=[e.e=0],e)},S.modulo=S.mod=function(e,t){var r,o,a=this;return e=new G(e,t),!a.c||!e.s||e.c&&!e.c[0]?new G(NaN):!e.c||a.c&&!a.c[0]?new G(a):(9==D?(o=e.s,e.s=1,r=n(a,e,0,3),e.s=o,r.s*=o):r=n(a,e,0,D),(e=a.minus(r.times(e))).c[0]||1!=D||(e.s=a.s),e)},S.multipliedBy=S.times=function(e,t){var n,r,o,a,s,i,c,u,l,f,m,h,b,g,v,_=this,x=_.c,T=(e=new G(e,t)).c;if(!(x&&T&&x[0]&&T[0]))return!_.s||!e.s||x&&!x[0]&&!T||T&&!T[0]&&!x?e.c=e.e=e.s=null:(e.s*=_.s,x&&T?(e.c=[0],e.e=0):e.c=e.e=null),e;for(r=w(_.e/d)+w(e.e/d),e.s*=_.s,(c=x.length)<(f=T.length)&&(b=x,x=T,T=b,o=c,c=f,f=o),o=c+f,b=[];o--;b.push(0));for(g=p,v=y,o=f;--o>=0;){for(n=0,m=T[o]%v,h=T[o]/v|0,a=o+(s=c);a>o;)n=((u=m*(u=x[--s]%v)+(i=h*u+(l=x[s]/v|0)*m)%v*v+b[a]+n)/g|0)+(i/v|0)+h*l,b[a--]=u%g;b[a]=n}return n?++r:b.splice(0,1),X(e,b,r)},S.negated=function(){var e=new G(this);return e.s=-e.s||null,e},S.plus=function(e,t){var n,r=this,o=r.s;if(t=(e=new G(e,t)).s,!o||!t)return new G(NaN);if(o!=t)return e.s=-t,r.minus(e);var a=r.e/d,s=e.e/d,i=r.c,c=e.c;if(!a||!s){if(!i||!c)return new G(o/0);if(!i[0]||!c[0])return c[0]?e:new G(i[0]?r:0*o)}if(a=w(a),s=w(s),i=i.slice(),o=a-s){for(o>0?(s=a,n=c):(o=-o,n=i),n.reverse();o--;n.push(0));n.reverse()}for((o=i.length)-(t=c.length)<0&&(n=c,c=i,i=n,t=o),o=0;t;)o=(i[--t]=i[t]+c[t]+o)/p|0,i[t]=p===i[t]?0:i[t]%p;return o&&(i=[o].concat(i),++s),X(e,i,s)},S.precision=S.sd=function(e,t){var n,r,o,a=this;if(null!=e&&e!==!!e)return v(e,1,h),null==t?t=I:v(t,0,8),z(new G(a),e,t);if(!(n=a.c))return null;if(r=(o=n.length-1)*d+1,o=n[o]){for(;o%10==0;o/=10,r--);for(o=n[0];o>=10;o/=10,r++);}return e&&a.e+1>r&&(r=a.e+1),r},S.shiftedBy=function(e){return v(e,-f,f),this.times("1e"+e)},S.squareRoot=S.sqrt=function(){var e,t,r,o,a,s=this,i=s.c,c=s.s,u=s.e,l=R+4,p=new G("0.5");if(1!==c||!i||!i[0])return new G(!c||c<0&&(!i||i[0])?NaN:i?s:1/0);if(0==(c=Math.sqrt(+s))||c==1/0?(((t=b(i)).length+u)%2==0&&(t+="0"),c=Math.sqrt(t),u=w((u+1)/2)-(u<0||u%2),r=new G(t=c==1/0?"1e"+u:(t=c.toExponential()).slice(0,t.indexOf("e")+1)+u)):r=new G(c+""),r.c[0])for((c=(u=r.e)+l)<3&&(c=0);;)if(a=r,r=p.times(a.plus(n(s,a,l,1))),b(a.c).slice(0,c)===(t=b(r.c)).slice(0,c)){if(r.e<u&&--c,"9999"!=(t=t.slice(c-3,c+1))&&(o||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(z(r,r.e+R+2,1),e=!r.times(r).eq(s));break}if(!o&&(z(a,a.e+R+2,0),a.times(a).eq(s))){r=a;break}l+=4,c+=4,o=1}return z(r,r.e+R+1,I,e)},S.toExponential=function(e,t){return null!=e&&(v(e,0,h),e++),V(this,e,t,1)},S.toFixed=function(e,t){return null!=e&&(v(e,0,h),e=e+this.e+1),V(this,e,t)},S.toFormat=function(e,t){var n=this.toFixed(e,t);if(this.c){var r,o=n.split("."),a=+W.groupSize,s=+W.secondaryGroupSize,i=W.groupSeparator,c=o[0],u=o[1],l=this.s<0,p=l?c.slice(1):c,d=p.length;if(s&&(r=a,a=s,s=r,d-=r),a>0&&d>0){for(r=d%a||a,c=p.substr(0,r);r<d;r+=a)c+=i+p.substr(r,a);s>0&&(c+=i+p.slice(r)),l&&(c="-"+c)}n=u?c+W.decimalSeparator+((s=+W.fractionGroupSize)?u.replace(new RegExp("\\d{"+s+"}\\B","g"),"$&"+W.fractionGroupSeparator):u):c}return n},S.toFraction=function(e){var t,r,o,a,s,i,c,l,p,f,y,h,w=this,g=w.c;if(null!=e&&(!(l=new G(e)).isInteger()&&(l.c||1!==l.s)||l.lt(C)))throw Error(u+"Argument "+(l.isInteger()?"out of range: ":"not an integer: ")+e);if(!g)return w.toString();for(r=new G(C),f=o=new G(C),a=p=new G(C),h=b(g),i=r.e=h.length-w.e-1,r.c[0]=m[(c=i%d)<0?d+c:c],e=!e||l.comparedTo(r)>0?i>0?r:f:l,c=L,L=1/0,l=new G(h),p.c[0]=0;y=n(l,r,0,1),1!=(s=o.plus(y.times(a))).comparedTo(e);)o=a,a=s,f=p.plus(y.times(s=f)),p=s,r=l.minus(y.times(s=r)),l=s;return s=n(e.minus(o),a,0,1),p=p.plus(s.times(f)),o=o.plus(s.times(a)),p.s=f.s=w.s,t=n(f,a,i*=2,I).minus(w).abs().comparedTo(n(p,o,i,I).minus(w).abs())<1?[f.toString(),a.toString()]:[p.toString(),o.toString()],L=c,t},S.toNumber=function(){return+this},S.toPrecision=function(e,t){return null!=e&&v(e,1,h),V(this,e,t,2)},S.toString=function(e){var t,n=this,o=n.s,a=n.e;return null===a?o?(t="Infinity",o<0&&(t="-"+t)):t="NaN":(t=b(n.c),null==e?t=a<=P||a>=B?T(t,a):A(t,a,"0"):(v(e,2,F.length,"Base"),t=r(A(t,a,"0"),10,e,o,!0)),o<0&&n.c[0]&&(t="-"+t)),t},S.valueOf=S.toJSON=function(){var e,t=this,n=t.e;return null===n?t.toString():(e=b(t.c),e=n<=P||n>=B?T(e,n):A(e,n,"0"),t.s<0?"-"+e:e)},S._isBigNumber=!0,null!=t&&G.set(t),G}()).default=a.BigNumber=a,void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},function(e,t){e.exports.weth_abi=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"guy",type:"address"},{name:"wad",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"src",type:"address"},{name:"dst",type:"address"},{name:"wad",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"wad",type:"uint256"}],name:"withdraw",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"dst",type:"address"},{name:"wad",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[],name:"deposit",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!0,inputs:[{name:"",type:"address"},{name:"",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{payable:!0,stateMutability:"payable",type:"fallback"},{anonymous:!1,inputs:[{indexed:!0,name:"src",type:"address"},{indexed:!0,name:"guy",type:"address"},{indexed:!1,name:"wad",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"src",type:"address"},{indexed:!0,name:"dst",type:"address"},{indexed:!1,name:"wad",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"dst",type:"address"},{indexed:!1,name:"wad",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"src",type:"address"},{indexed:!1,name:"wad",type:"uint256"}],name:"Withdrawal",type:"event"}],e.exports.weth_address="0xd0A1E359811322d97991E03f863a0C30C2cF029C",e.exports.zrx_address="0x6ff6c0ff1d68b964901f986d4c9fa3ac68346570",e.exports.zrx_abi=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{inputs:[],payable:!1,type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"_from",type:"address"},{indexed:!0,name:"_to",type:"address"},{indexed:!1,name:"_value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"_owner",type:"address"},{indexed:!0,name:"_spender",type:"address"},{indexed:!1,name:"_value",type:"uint256"}],name:"Approval",type:"event"}],e.exports.exchange_address="0x90fe2af704b34e0224bf2299c838e04d4dcf1364",e.exports.exchange_abi=[{constant:!0,inputs:[{name:"numerator",type:"uint256"},{name:"denominator",type:"uint256"},{name:"target",type:"uint256"}],name:"isRoundingError",outputs:[{name:"",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"",type:"bytes32"}],name:"filled",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"",type:"bytes32"}],name:"cancelled",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5][]"},{name:"orderValues",type:"uint256[6][]"},{name:"fillTakerTokenAmount",type:"uint256"},{name:"shouldThrowOnInsufficientBalanceOrAllowance",type:"bool"},{name:"v",type:"uint8[]"},{name:"r",type:"bytes32[]"},{name:"s",type:"bytes32[]"}],name:"fillOrdersUpTo",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5]"},{name:"orderValues",type:"uint256[6]"},{name:"cancelTakerTokenAmount",type:"uint256"}],name:"cancelOrder",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"ZRX_TOKEN_CONTRACT",outputs:[{name:"",type:"address"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5][]"},{name:"orderValues",type:"uint256[6][]"},{name:"fillTakerTokenAmounts",type:"uint256[]"},{name:"v",type:"uint8[]"},{name:"r",type:"bytes32[]"},{name:"s",type:"bytes32[]"}],name:"batchFillOrKillOrders",outputs:[],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5]"},{name:"orderValues",type:"uint256[6]"},{name:"fillTakerTokenAmount",type:"uint256"},{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],name:"fillOrKillOrder",outputs:[],payable:!1,type:"function"},{constant:!0,inputs:[{name:"orderHash",type:"bytes32"}],name:"getUnavailableTakerTokenAmount",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"signer",type:"address"},{name:"hash",type:"bytes32"},{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],name:"isValidSignature",outputs:[{name:"",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"numerator",type:"uint256"},{name:"denominator",type:"uint256"},{name:"target",type:"uint256"}],name:"getPartialAmount",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"TOKEN_TRANSFER_PROXY_CONTRACT",outputs:[{name:"",type:"address"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5][]"},{name:"orderValues",type:"uint256[6][]"},{name:"fillTakerTokenAmounts",type:"uint256[]"},{name:"shouldThrowOnInsufficientBalanceOrAllowance",type:"bool"},{name:"v",type:"uint8[]"},{name:"r",type:"bytes32[]"},{name:"s",type:"bytes32[]"}],name:"batchFillOrders",outputs:[],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5][]"},{name:"orderValues",type:"uint256[6][]"},{name:"cancelTakerTokenAmounts",type:"uint256[]"}],name:"batchCancelOrders",outputs:[],payable:!1,type:"function"},{constant:!1,inputs:[{name:"orderAddresses",type:"address[5]"},{name:"orderValues",type:"uint256[6]"},{name:"fillTakerTokenAmount",type:"uint256"},{name:"shouldThrowOnInsufficientBalanceOrAllowance",type:"bool"},{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],name:"fillOrder",outputs:[{name:"filledTakerTokenAmount",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"orderAddresses",type:"address[5]"},{name:"orderValues",type:"uint256[6]"}],name:"getOrderHash",outputs:[{name:"",type:"bytes32"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"EXTERNAL_QUERY_GAS_LIMIT",outputs:[{name:"",type:"uint16"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"VERSION",outputs:[{name:"",type:"string"}],payable:!1,type:"function"},{inputs:[{name:"_zrxToken",type:"address"},{name:"_tokenTransferProxy",type:"address"}],payable:!1,type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"maker",type:"address"},{indexed:!1,name:"taker",type:"address"},{indexed:!0,name:"feeRecipient",type:"address"},{indexed:!1,name:"makerToken",type:"address"},{indexed:!1,name:"takerToken",type:"address"},{indexed:!1,name:"filledMakerTokenAmount",type:"uint256"},{indexed:!1,name:"filledTakerTokenAmount",type:"uint256"},{indexed:!1,name:"paidMakerFee",type:"uint256"},{indexed:!1,name:"paidTakerFee",type:"uint256"},{indexed:!0,name:"tokens",type:"bytes32"},{indexed:!1,name:"orderHash",type:"bytes32"}],name:"LogFill",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"maker",type:"address"},{indexed:!0,name:"feeRecipient",type:"address"},{indexed:!1,name:"makerToken",type:"address"},{indexed:!1,name:"takerToken",type:"address"},{indexed:!1,name:"cancelledMakerTokenAmount",type:"uint256"},{indexed:!1,name:"cancelledTakerTokenAmount",type:"uint256"},{indexed:!0,name:"tokens",type:"bytes32"},{indexed:!1,name:"orderHash",type:"bytes32"}],name:"LogCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"errorId",type:"uint8"},{indexed:!0,name:"orderHash",type:"bytes32"}],name:"LogError",type:"event"}]},function(e,t,n){var r=n(1);n(0);$(document).ready(function(){if("undefined"==typeof web3)throw"No web3 detected. Is Metamask/Mist being used?";var e,t,n;web3=new Web3(web3.currentProvider),console.log("Using web3 version: "+Web3.version),console.log("Is metamask the provider = "+window.web3.currentProvider.isMetaMask),console.log("Constructor name = "+window.web3.currentProvider.constructor.name),console.log("Type of web3 = "+typeof web3),window.MAX_UINT=web3.utils.toBN("115792089237316195423570985008687907853269984665640564039457584007913129639935");var o=$.getJSON("IndexContract.json");if(console.log("Web3.eth.net = "+web3.eth.net),void 0===web3.eth.net)throw new Error("Parity signer is not available.");var a=web3.eth.net.getId(),s=web3.eth.getAccounts();function i(n){console.log("Inside method setAllowance"),e.methods.set_allowances(n).send({from:t}).then(function(){console.log("After setting allowance")}).then(c).catch(console.error)}function c(){window.WETH_Token.methods.balanceOf(contractAddress).call().then(function(e){$("#display").text(e)}),u(),e.methods.token_quantities().call().then(function(e){$("#quantities").text(e)}).catch(console.error),e.methods.token_weight().call().then(function(e){$("#weights").text(e)}).catch(console.error),e.methods.rebalance_in_blocks().call().then(function(e){$("#rebalance_in_blocks").text(e)}).catch(console.error),e.methods.get_last_rebalanced().call().then(function(e){$("#last_rebalanced").text(e)}).catch(console.error),window.WETH_Token.methods.allowance(t,contractAddress).call().then(function(e){$("#contract_approval_WETH").text("WETH:contract on owner = "+e)}).catch(console.error),window.WETH_Token.methods.allowance(contractAddress,t).call().then(function(e){$("#owner_approval_contract_WETH").text("WETH:owner on contract = "+e)}).catch(console.error),window.ZRX_Token.methods.allowance(contractAddress,t).call().then(function(e){$("#owner_approval_contract_ZRX").text("ZRX:owner on contract = "+e)}).catch(console.error),web3.eth.getBlockNumber().then(function(e){$("#current_block_height").text("Height = "+e),window.currentBlockHeight=e})}function u(){e.methods.token_addresses().call().then(function(e){$("#token_addresses").text(e)}).catch(console.error)}Promise.all([o,a,s]).then(function(o){var a=o[0],s=o[1],i=o[2];if(t=i[0],n=i[1],!(s in a.networks))throw new Error("Contract not found in selected Ethereum network on MetaMask.");console.log("Before contractData");var c=a.networks[s].address;console.log("ContractAddress = "+c),window.contractABI=a.abi,e=new web3.eth.Contract(window.contractABI,c),console.log("Setup contract"),window.contractAbi=void 0,window.contractAddress=c,window.contract=e,window.WETH_Token=new web3.eth.Contract(r.weth_abi,r.weth_address),window.ZRX_Token=new web3.eth.Contract(r.zrx_abi,r.zrx_address),window.EXCHANGE=new web3.eth.Contract(r.exchange_abi,r.exchange_address)}).then(u).then(c).catch(console.error),$("#submit").click(function(){console.log("Trading contract tokens"),function(){const t="0x032dbe12b8c4550b6a90490e6f8b79013d3833f7",r="0x0000000000000000000000000000000000000000",o="0x6ff6c0ff1d68b964901f986d4c9fa3ac68346570",a="0xd0a1e359811322d97991e03f863a0c30c2cf029c",s="0xa258b39954cef5cb142fd567a46cddb31a670124",i=web3.utils.toBN("1000000000000000000"),u=web3.utils.toBN("500000000000000000000"),l=web3.utils.toBN("1530579630"),p="71908247906872754311838145342720002977696048562630825704739380803597823865473",d=web3.utils.toBN("27"),f="0xf20d22005cacc1ad5a510c090fb937cdb7438750b33c55128e019ec434a061e4",m="0x35d4772799d272e9c9adf04906a8690870e37d7dd657726652e5e1b7bb17117e",y=web3.utils.toBN("100000000000000"),h=[t,r,o,a,s],w=[i,u,0,0,l,p,y];window.EXCHANGE.methods.getOrderHash([t,r,o,a,s],[i,u,0,0,l,p]).call().then(function(r){console.log("OrderHash = "+r),window.EXCHANGE.methods.isValidSignature(t,r,d,f,m).call().then(function(t){if(!t)throw"Server contract seems to be invalid";console.log("Contract is valid?"+t),e.methods.make_exchange_trade(h,w,d,f,m).send({from:n}).then(function(){console.log("Called makeExchangeTrade"),console.log("Ideally follow the event log in Exchange contract to know of trade"),console.log("Exchange trade complete... wohoo")})})}).then(c).catch(console.error)}(),console.log("After exchange trade")}),$("#mint").click(function(){console.log("Setting for ZRX token"),i(r.zrx_address),console.log("Setting for WETH token"),i(r.weth_address),console.log("After setting for WETH token")}),$("#approve_transfer").click(function(){console.log("Before approve ETH"),console.log("Inside Allow Wrapped Ether Transfer to Smart Contract"),window.WETH_Token.methods.approve(window.contractAddress,window.MAX_UINT).send({from:t}).then(function(e){e&&(console.log("Result = "+e),console.log("Provided "+window.contractAddress+" appropriate permissions for account = "+t))}).then(c).catch(console.error),console.log("After approve ETH")}),$("#transfer_weth_to_contract").click(function(){var n;console.log("Before Transferring WETH to contract"),n="0.1",console.log("Inside transfer WETH to contract"),total_amount_after_decimals=web3.utils.toWei(n,"ether"),console.log("Total amount = "+total_amount_after_decimals),e.methods.deposit_weth(total_amount_after_decimals).send({from:t}).then(function(e){e&&(console.log("Deposited? = "+e),console.log("To Contract Address "+contractAddress))}).then(c).catch(console.error),console.log("After Transferring WETH to contract")}),$("#withdraw").click(function(){e.methods.withdraw().send({from:t}).then(function(e){e&&console.log("Successfully withdrawn tokens")}).then(c).catch(console.error)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,